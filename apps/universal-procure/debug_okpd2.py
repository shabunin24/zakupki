#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –û–ö–ü–î2
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from parser.ru_nlq import NLQParser

def debug_okpd2():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –û–ö–ü–î2"""
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –û–ö–ü–î2")
    print("=" * 60)
    
    parser = NLQParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = "—É—Å–ª—É–≥–∏ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –¥–æ—Ä–æ–≥ –ö—Ä—ã–º –æ—Ç 5 –¥–æ 20 –º–ª–Ω"
    normalized = parser._normalize_text(query)
    lemmatized = parser._lemmatize_text(normalized)
    
    print(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
    print(f"üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {normalized}")
    print(f"üìù –õ–µ–º–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {lemmatized}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    print(f"\nüîç –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:")
    for keyword, okpd2_codes in parser.okpd2_dict.items():
        if keyword in lemmatized:
            print(f"   –ù–∞–π–¥–µ–Ω–æ: {keyword} -> {okpd2_codes}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º
    print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º:")
    words = lemmatized.split()
    for word in words:
        for keyword, okpd2_codes in parser.okpd2_dict.items():
            if word in keyword or keyword in word:
                print(f"   –°–ª–æ–≤–æ '{word}' —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å '{keyword}' -> {okpd2_codes}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:")
    test_keywords = ["—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ—Ä–æ–≥", "–¥–æ—Ä–æ–≥–∏", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ"]
    for keyword in test_keywords:
        if keyword in parser.okpd2_dict:
            print(f"   '{keyword}' –Ω–∞–π–¥–µ–Ω: {parser.okpd2_dict[keyword]}")
        else:
            print(f"   '{keyword}' –ù–ï –Ω–∞–π–¥–µ–Ω")
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
    print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    result = parser.parse(query)
    print(f"   –û–ö–ü–î2: {result['okpd2']}")
    print(f"   –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {result['diagnostics']}")

if __name__ == "__main__":
    debug_okpd2()
