#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from parser.ru_nlq import NLQParser

def demo_parser():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    
    print("üöÄ UniversalProcureSearch - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = NLQParser()
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    test_queries = [
        "–±—É–º–∞–≥–∞ –ê4 –æ—Ñ–∏—Å–Ω–∞—è –ú–æ—Å–∫–≤–∞ –¥–æ 200 —Ç—ã—Å —Ä—É–±",
        "—É—Å–ª—É–≥–∏ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –¥–æ—Ä–æ–≥ –ö—Ä—ã–º –æ—Ç 5 –¥–æ 20 –º–ª–Ω",
        "–ø–æ—Å—Ç–∞–≤–∫–∞ –º–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ú–æ—Å–∫–≤–∞ –∫–æ–Ω–∫—É—Ä—Å",
        "—ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –¥–æ 3 –º–ª–Ω —Ä—É–± –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –Ω–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –º–æ—Å—Ç–æ–≤ –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–º –∫—Ä–∞–µ –æ—Ç 10 –¥–æ 50 –º–ª–Ω —Ä—É–±–ª–µ–π –∫–æ–Ω–∫—É—Ä—Å",
        "–∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
        "–¥–æ 1 –º–ª–Ω —Ä—É–±–ª–µ–π",
        "–≤ –ú–æ—Å–∫–≤–µ",
        "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüìù –ü—Ä–∏–º–µ—Ä {i}: {query}")
        print("-" * 50)
        
        try:
            # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
            result = parser.parse(query)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            print(f"   –¢–µ–∫—Å—Ç: {result['text']}")
            
            if result['okpd2']:
                print(f"   –û–ö–ü–î2: {', '.join(result['okpd2'])}")
            
            if result['region']:
                print(f"   –†–µ–≥–∏–æ–Ω: {', '.join(result['region'])}")
            
            if result['price_min'] is not None:
                print(f"   –¶–µ–Ω–∞ –æ—Ç: {result['price_min']:,.0f} —Ä—É–±")
            
            if result['price_max'] is not None:
                print(f"   –¶–µ–Ω–∞ –¥–æ: {result['price_max']:,.0f} —Ä—É–±")
            
            if result['method']:
                print(f"   –ú–µ—Ç–æ–¥: {', '.join(result['method'])}")
            
            if result['status']:
                print(f"   –°—Ç–∞—Ç—É—Å: {', '.join(result['status'])}")
            
            if result['publish_date_from']:
                print(f"   –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å: {result['publish_date_from'].strftime('%Y-%m-%d')}")
            
            if result['deadline_from']:
                print(f"   –î–µ–¥–ª–∞–π–Ω —Å: {result['deadline_from'].strftime('%Y-%m-%d')}")
            
            if result['deadline_to']:
                print(f"   –î–µ–¥–ª–∞–π–Ω –¥–æ: {result['deadline_to'].strftime('%Y-%m-%d')}")
            
            # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            if 'diagnostics' in result:
                diagnostics = result['diagnostics']
                print(f"   üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
                if diagnostics['matched_keywords']:
                    print(f"      –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(diagnostics['matched_keywords'])}")
                if diagnostics['regions_detected']:
                    print(f"      –†–µ–≥–∏–æ–Ω—ã: {', '.join(diagnostics['regions_detected'])}")
                if diagnostics['method_detected']:
                    print(f"      –ú–µ—Ç–æ–¥: {diagnostics['method_detected']}")
                if diagnostics['status_detected']:
                    print(f"      –°—Ç–∞—Ç—É—Å: {diagnostics['status_detected']}")
                if diagnostics['date_rules']:
                    print(f"      –ü—Ä–∞–≤–∏–ª–∞ –¥–∞—Ç: {', '.join(diagnostics['date_rules'])}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
    
    print("\n" + "=" * 70)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã:")
    print("   pytest tests/ -v")
    print("\nüöÄ –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
    print("   uvicorn app:app --reload")

if __name__ == "__main__":
    demo_parser()
