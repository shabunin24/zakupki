#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Telegram Mini App –ì–æ—Å–ó–∞–∫—É–ø–∫–∏
"""

import requests
import time
import json

def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
    print("üîç –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (HTTP)")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        response = requests.get(f"{base_url}/index.html", timeout=5)
        main_page_ok = response.status_code == 200
        print(f"   –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {'‚úÖ' if main_page_ok else '‚ùå'}")
        
        if main_page_ok:
            content = response.text
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            has_title = "–ì–æ—Å–ó–∞–∫—É–ø–∫–∏" in content
            has_search = "search-input" in content
            has_menu = "main-menu" in content
            has_nav = "bottom-nav" in content
            
            print(f"      –ó–∞–≥–æ–ª–æ–≤–æ–∫: {'‚úÖ' if has_title else '‚ùå'}")
            print(f"      –ü–æ–∏—Å–∫: {'‚úÖ' if has_search else '‚ùå'}")
            print(f"      –ú–µ–Ω—é: {'‚úÖ' if has_menu else '‚ùå'}")
            print(f"      –ù–∞–≤–∏–≥–∞—Ü–∏—è: {'‚úÖ' if has_nav else '‚ùå'}")
            
            main_page_score = sum([has_title, has_search, has_menu, has_nav])
            main_page_total = 4
        else:
            main_page_score = 0
            main_page_total = 4
            
    except Exception as e:
        print(f"   –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ‚ùå –û—à–∏–±–∫–∞: {e}")
        main_page_ok = False
        main_page_score = 0
        main_page_total = 4
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        response = requests.get(f"{base_url}/test.html", timeout=5)
        test_page_ok = response.status_code == 200
        print(f"   –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {'‚úÖ' if test_page_ok else '‚ùå'}")
        
        if test_page_ok:
            content = response.text
            has_test_buttons = "test-btn" in content
            has_auto_test = "auto-test.js" in content
            print(f"      –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏: {'‚úÖ' if has_test_buttons else '‚ùå'}")
            print(f"      –ê–≤—Ç–æ—Ç–µ—Å—Ç: {'‚úÖ' if has_auto_test else '‚ùå'}")
            
            test_page_score = sum([has_test_buttons, has_auto_test])
            test_page_total = 2
        else:
            test_page_score = 0
            test_page_total = 2
            
    except Exception as e:
        print(f"   –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ‚ùå –û—à–∏–±–∫–∞: {e}")
        test_page_ok = False
        test_page_score = 0
        test_page_total = 2
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CSS
    try:
        response = requests.get(f"{base_url}/styles.css", timeout=5)
        css_ok = response.status_code == 200
        print(f"   CSS —Å—Ç–∏–ª–∏: {'‚úÖ' if css_ok else '‚ùå'}")
        
        if css_ok:
            content = response.text
            has_ios_style = "apple-system" in content or "BlinkMacSystemFont" in content
            has_colors = "#007AFF" in content
            has_responsive = "@media" in content
            
            print(f"      iOS —Å—Ç–∏–ª—å: {'‚úÖ' if has_ios_style else '‚ùå'}")
            print(f"      –¶–≤–µ—Ç–∞: {'‚úÖ' if has_colors else '‚ùå'}")
            print(f"      –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: {'‚úÖ' if has_responsive else '‚ùå'}")
            
            css_score = sum([has_ios_style, has_colors, has_responsive])
            css_total = 3
        else:
            css_score = 0
            css_total = 3
            
    except Exception as e:
        print(f"   CSS —Å—Ç–∏–ª–∏: ‚ùå –û—à–∏–±–∫–∞: {e}")
        css_ok = False
        css_score = 0
        css_total = 3
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ JavaScript
    try:
        response = requests.get(f"{base_url}/script.js", timeout=5)
        js_ok = response.status_code == 200
        print(f"   JavaScript: {'‚úÖ' if js_ok else '‚ùå'}")
        
        if js_ok:
            content = response.text
            has_search = "searchPurchases" in content
            has_favorites = "addToFavorites" in content
            has_applications = "submitApplication" in content
            has_modals = "showModal" in content
            has_notifications = "showNotification" in content
            
            print(f"      –ü–æ–∏—Å–∫: {'‚úÖ' if has_search else '‚ùå'}")
            print(f"      –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {'‚úÖ' if has_favorites else '‚ùå'}")
            print(f"      –ó–∞—è–≤–∫–∏: {'‚úÖ' if has_applications else '‚ùå'}")
            print(f"      –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞: {'‚úÖ' if has_modals else '‚ùå'}")
            print(f"      –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if has_notifications else '‚ùå'}")
            
            js_score = sum([has_search, has_favorites, has_applications, has_modals, has_notifications])
            js_total = 5
        else:
            js_score = 0
            js_total = 5
            
    except Exception as e:
        print(f"   JavaScript: ‚ùå –û—à–∏–±–∫–∞: {e}")
        js_ok = False
        js_score = 0
        js_total = 5
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        response = requests.get(f"{base_url}/config.js", timeout=5)
        config_ok = response.status_code == 200
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if config_ok else '‚ùå'}")
        
        if config_ok:
            content = response.text
            has_token = "8203311811" in content
            has_api_url = "api.telegram.org" in content
            has_webapp_url = "shabunin24.github.io" in content
            
            print(f"      –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'‚úÖ' if has_token else '‚ùå'}")
            print(f"      API URL: {'‚úÖ' if has_api_url else '‚ùå'}")
            print(f"      WebApp URL: {'‚úÖ' if has_webapp_url else '‚ùå'}")
            
            config_score = sum([has_token, has_api_url, has_webapp_url])
            config_total = 3
        else:
            config_score = 0
            config_total = 3
            
    except Exception as e:
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ‚ùå –û—à–∏–±–∫–∞: {e}")
        config_ok = False
        config_score = 0
        config_total = 3
    
    return {
        'main_page': {'ok': main_page_ok, 'score': main_page_score, 'total': main_page_total},
        'test_page': {'ok': test_page_ok, 'score': test_page_score, 'total': test_page_total},
        'css': {'ok': css_ok, 'score': css_score, 'total': css_total},
        'javascript': {'ok': js_ok, 'score': js_score, 'total': js_total},
        'config': {'ok': config_ok, 'score': config_score, 'total': config_total}
    }

def test_telegram_bot_api():
    """–¢–µ—Å—Ç Telegram Bot API"""
    print("\nü§ñ –¢–µ—Å—Ç 2: Telegram Bot API")
    
    bot_token = "8203311811:AAEbVoeZ0inIO7CUFuGUbwNRdoL2xfpxfPw"
    api_url = f"https://api.telegram.org/bot{bot_token}/getMe"
    
    try:
        response = requests.get(api_url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data['result']
                print(f"   ‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: @{bot_info['username']}")
                print(f"      –ò–º—è: {bot_info['first_name']}")
                print(f"      ID: {bot_info['id']}")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return False
        else:
            print(f"   ‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_github_pages():
    """–¢–µ—Å—Ç GitHub Pages"""
    print("\nüåê –¢–µ—Å—Ç 3: GitHub Pages")
    
    try:
        response = requests.get("https://shabunin24.github.io/zakupki/", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ GitHub Pages —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            content = response.text
            has_title = "–ì–æ—Å–ó–∞–∫—É–ø–∫–∏" in content
            has_telegram = "telegram-web-app.js" in content
            has_config = "config.js" in content
            
            print(f"      –ó–∞–≥–æ–ª–æ–≤–æ–∫: {'‚úÖ' if has_title else '‚ùå'}")
            print(f"      Telegram API: {'‚úÖ' if has_telegram else '‚ùå'}")
            print(f"      –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if has_config else '‚ùå'}")
            
            return True
        else:
            print(f"   ‚ö†Ô∏è  GitHub Pages –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå GitHub Pages –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_advanced_features():
    """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ HTTP"""
    print("\nüöÄ –¢–µ—Å—Ç 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫
    try:
        response = requests.get(f"{base_url}/test.html", timeout=5)
        if response.status_code == 200:
            content = response.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            has_advanced_search = "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫" in content
            has_filters = "–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞" in content
            has_quick_filters = "–ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã" in content
            has_stats = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in content
            
            print(f"   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {'‚úÖ' if has_advanced_search else '‚ùå'}")
            print(f"   –§–∏–ª—å—Ç—Ä—ã: {'‚úÖ' if has_filters else '‚ùå'}")
            print(f"   –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {'‚úÖ' if has_quick_filters else '‚ùå'}")
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'‚úÖ' if has_stats else '‚ùå'}")
            
            advanced_score = sum([has_advanced_search, has_filters, has_quick_filters, has_stats])
            advanced_total = 4
            
            return {'score': advanced_score, 'total': advanced_total}
        else:
            return {'score': 0, 'total': 4}
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return {'score': 0, 'total': 4}

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM MINI APP –ì–æ—Å–ó–∞–∫—É–ø–∫–∏")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    basic_results = test_basic_functionality()
    bot_api_ok = test_telegram_bot_api()
    github_pages_ok = test_github_pages()
    advanced_results = test_advanced_features()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_score = 0
    total_possible = 0
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for test_name, test_data in basic_results.items():
        score = test_data['score']
        total = test_data['total']
        percentage = (score / total) * 100 if total > 0 else 0
        
        print(f"   {test_name}: {score}/{total} ({percentage:.1f}%)")
        total_score += score
        total_possible += total
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
    total_possible += 1  # Bot API
    if bot_api_ok:
        total_score += 1
    
    total_possible += 1  # GitHub Pages
    if github_pages_ok:
        total_score += 1
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    advanced_score = advanced_results['score']
    advanced_total = advanced_results['total']
    total_score += advanced_score
    total_possible += advanced_total
    
    print(f"   Telegram Bot API: {'1/1 (100.0%)' if bot_api_ok else '0/1 (0.0%)'}")
    print(f"   GitHub Pages: {'1/1 (100.0%)' if github_pages_ok else '0/1 (0.0%)'}")
    print(f"   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {advanced_score}/{advanced_total} ({(advanced_score/advanced_total)*100:.1f}%)")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    success_rate = (total_score / total_possible) * 100
    
    print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_score}/{total_possible} ({success_rate:.1f}%)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if success_rate >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    elif success_rate >= 70:
        print("‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    elif success_rate >= 50:
        print("‚ùå –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.")
    else:
        print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º
    if success_rate < 100:
        print("\nüîß –ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        for test_name, test_data in basic_results.items():
            if test_data['score'] < test_data['total']:
                missing = test_data['total'] - test_data['score']
                print(f"   ‚Ä¢ {test_name} - –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {missing} –∏–∑ {test_data['total']} —Ñ—É–Ω–∫—Ü–∏–π")
        
        # API –ø—Ä–æ–±–ª–µ–º—ã
        if not bot_api_ok:
            print("   ‚Ä¢ Telegram Bot API - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        if not github_pages_ok:
            print("   ‚Ä¢ GitHub Pages - –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if advanced_results['score'] < advanced_results['total']:
            missing = advanced_results['total'] - advanced_results['score']
            print(f"   ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {missing} –∏–∑ {advanced_results['total']}")
    
    return {
        'success_rate': success_rate,
        'total_score': total_score,
        'total_possible': total_possible,
        'details': {
            'basic': basic_results,
            'bot_api': bot_api_ok,
            'github_pages': github_pages_ok,
            'advanced': advanced_results
        }
    }

if __name__ == "__main__":
    try:
        results = run_comprehensive_test()
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['success_rate']:.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open('test_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
