#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ Telegram Mini App –ì–æ—Å–ó–∞–∫—É–ø–∫–∏
"""

import requests
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
    print("üîç –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (HTTP)")
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        response = requests.get(f"{base_url}/index.html", timeout=5)
        main_page_ok = response.status_code == 200
        print(f"   –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {'‚úÖ' if main_page_ok else '‚ùå'}")
    except Exception as e:
        print(f"   –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ‚ùå –û—à–∏–±–∫–∞: {e}")
        main_page_ok = False
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        response = requests.get(f"{base_url}/test.html", timeout=5)
        test_page_ok = response.status_code == 200
        print(f"   –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {'‚úÖ' if test_page_ok else '‚ùå'}")
    except Exception as e:
        print(f"   –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ‚ùå –û—à–∏–±–∫–∞: {e}")
        test_page_ok = False
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CSS
    try:
        response = requests.get(f"{base_url}/styles.css", timeout=5)
        css_ok = response.status_code == 200
        print(f"   CSS —Å—Ç–∏–ª–∏: {'‚úÖ' if css_ok else '‚ùå'}")
    except Exception as e:
        print(f"   CSS —Å—Ç–∏–ª–∏: ‚ùå –û—à–∏–±–∫–∞: {e}")
        css_ok = False
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ JavaScript
    try:
        response = requests.get(f"{base_url}/script.js", timeout=5)
        js_ok = response.status_code == 200
        print(f"   JavaScript: {'‚úÖ' if js_ok else '‚ùå'}")
    except Exception as e:
        print(f"   JavaScript: ‚ùå –û—à–∏–±–∫–∞: {e}")
        js_ok = False
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        response = requests.get(f"{base_url}/config.js", timeout=5)
        config_ok = response.status_code == 200
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if config_ok else '‚ùå'}")
    except Exception as e:
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ‚ùå –û—à–∏–±–∫–∞: {e}")
        config_ok = False
    
    return {
        'main_page': main_page_ok,
        'test_page': test_page_ok,
        'css': css_ok,
        'javascript': js_ok,
        'config': config_ok
    }

def test_telegram_bot_api():
    """–¢–µ—Å—Ç Telegram Bot API"""
    print("\nü§ñ –¢–µ—Å—Ç 2: Telegram Bot API")
    
    bot_token = "8203311811:AAEbVoeZ0inIO7CUFuGUbwNRdoL2xfpxfPw"
    api_url = f"https://api.telegram.org/bot{bot_token}/getMe"
    
    try:
        response = requests.get(api_url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data['result']
                print(f"   ‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: @{bot_info['username']}")
                print(f"      –ò–º—è: {bot_info['first_name']}")
                print(f"      ID: {bot_info['id']}")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return False
        else:
            print(f"   ‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_github_pages():
    """–¢–µ—Å—Ç GitHub Pages"""
    print("\nüåê –¢–µ—Å—Ç 3: GitHub Pages")
    
    try:
        response = requests.get("https://shabunin24.github.io/zakupki/", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ GitHub Pages —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"   ‚ö†Ô∏è  GitHub Pages –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå GitHub Pages –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_selenium_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Selenium"""
    print("\nüß™ –¢–µ—Å—Ç 4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        driver = webdriver.Chrome(options=chrome_options)
        driver.get("http://localhost:8000/test.html")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        elements_to_check = [
            ("–ó–∞–≥–æ–ª–æ–≤–æ–∫", "h1", "–ì–æ—Å–ó–∞–∫—É–ø–∫–∏"),
            ("–ü–æ–∏—Å–∫", ".search-input", ""),
            ("–ú–µ–Ω—é", ".main-menu", ""),
            ("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ".bottom-nav", "")
        ]
        
        results = {}
        for name, selector, expected_text in elements_to_check:
            try:
                element = driver.find_element(By.CSS_SELECTOR, selector)
                if expected_text:
                    found = expected_text in element.text
                else:
                    found = element.is_displayed()
                
                results[name] = found
                print(f"   {name}: {'‚úÖ' if found else '‚ùå'}")
            except Exception as e:
                results[name] = False
                print(f"   {name}: ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript —Ñ—É–Ω–∫—Ü–∏–∏
        js_tests = [
            ("mockPurchases", "typeof mockPurchases !== 'undefined' && mockPurchases.length > 0"),
            ("searchPurchases", "typeof searchPurchases === 'function'"),
            ("addToFavorites", "typeof addToFavorites === 'function'"),
            ("showPurchaseDetails", "typeof showPurchaseDetails === 'function'")
        ]
        
        js_results = {}
        for name, test_code in js_tests:
            try:
                result = driver.execute_script(f"return {test_code}")
                js_results[name] = result
                print(f"   {name}: {'‚úÖ' if result else '‚ùå'}")
            except Exception as e:
                js_results[name] = False
                print(f"   {name}: ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        driver.quit()
        
        return {
            'ui_elements': results,
            'javascript_functions': js_results
        }
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Selenium: {e}")
        return None

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM MINI APP –ì–æ—Å–ó–∞–∫—É–ø–∫–∏")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    basic_results = test_basic_functionality()
    bot_api_ok = test_telegram_bot_api()
    github_pages_ok = test_github_pages()
    selenium_results = test_selenium_functionality()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    basic_tests = sum(basic_results.values())
    basic_total = len(basic_results)
    
    print(f"üîç –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {basic_tests}/{basic_total} ‚úÖ")
    print(f"ü§ñ Telegram Bot API: {'‚úÖ' if bot_api_ok else '‚ùå'}")
    print(f"üåê GitHub Pages: {'‚úÖ' if github_pages_ok else '‚ùå'}")
    
    if selenium_results:
        ui_tests = sum(selenium_results['ui_elements'].values())
        ui_total = len(selenium_results['ui_elements'])
        js_tests = sum(selenium_results['javascript_functions'].values())
        js_total = len(selenium_results['javascript_functions'])
        
        print(f"üß™ UI —ç–ª–µ–º–µ–Ω—Ç—ã: {ui_tests}/{ui_total} ‚úÖ")
        print(f"‚öôÔ∏è  JavaScript —Ñ—É–Ω–∫—Ü–∏–∏: {js_tests}/{js_total} ‚úÖ")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    total_passed = basic_tests + (1 if bot_api_ok else 0) + (1 if github_pages_ok else 0)
    if selenium_results:
        total_passed += ui_tests + js_tests
        total_tests = basic_total + 2 + ui_total + js_total
    else:
        total_tests = basic_total + 2
    
    success_rate = (total_passed / total_tests) * 100
    
    print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_passed}/{total_tests} ({success_rate:.1f}%)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if success_rate >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    elif success_rate >= 70:
        print("‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    elif success_rate >= 50:
        print("‚ùå –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.")
    else:
        print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º
    if success_rate < 100:
        print("\nüîß –ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        for test_name, passed in basic_results.items():
            if not passed:
                print(f"   ‚Ä¢ {test_name} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # API –ø—Ä–æ–±–ª–µ–º—ã
        if not bot_api_ok:
            print("   ‚Ä¢ Telegram Bot API - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        if not github_pages_ok:
            print("   ‚Ä¢ GitHub Pages - –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # Selenium –ø—Ä–æ–±–ª–µ–º—ã
        if selenium_results:
            for test_name, passed in selenium_results['ui_elements'].items():
                if not passed:
                    print(f"   ‚Ä¢ UI —ç–ª–µ–º–µ–Ω—Ç '{test_name}' - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            for test_name, passed in selenium_results['javascript_functions'].items():
                if not passed:
                    print(f"   ‚Ä¢ JavaScript —Ñ—É–Ω–∫—Ü–∏—è '{test_name}' - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    return {
        'success_rate': success_rate,
        'total_passed': total_passed,
        'total_tests': total_tests,
        'details': {
            'basic': basic_results,
            'bot_api': bot_api_ok,
            'github_pages': github_pages_ok,
            'selenium': selenium_results
        }
    }

if __name__ == "__main__":
    try:
        results = run_comprehensive_test()
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['success_rate']:.1f}%")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
