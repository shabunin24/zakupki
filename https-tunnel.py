#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTPS —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Mini App
"""

import http.server
import socketserver
import ssl
import threading
import webbrowser
from urllib.parse import urlparse
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOCAL_PORT = 3000
HTTPS_PORT = 8443
CERT_FILE = "cert.pem"
KEY_FILE = "key.pem"

def create_self_signed_cert():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    try:
        from cryptography import x509
        from cryptography.x509.oid import NameOID
        from cryptography.hazmat.primitives import hashes, serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        from datetime import datetime, timedelta
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subject = issuer = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, "RU"),
            x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, "Moscow"),
            x509.NameAttribute(NameOID.LOCALITY_NAME, "Moscow"),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, "Zakupki Bot"),
            x509.NameAttribute(NameOID.COMMON_NAME, "localhost"),
        ])
        
        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.utcnow()
        ).not_valid_after(
            datetime.utcnow() + timedelta(days=365)
        ).add_extension(
            x509.SubjectAlternativeName([
                x509.DNSName("localhost"),
                x509.IPAddress("127.0.0.1"),
            ]),
            critical=False,
        ).sign(private_key, hashes.SHA256())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á
        with open(CERT_FILE, "wb") as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))
        
        with open(KEY_FILE, "wb") as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ))
        
        print("‚úÖ –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω")
        return True
        
    except ImportError:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è cryptography: pip install cryptography")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False

def start_https_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTPS —Å–µ—Ä–≤–µ—Ä"""
    try:
        # –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        handler = http.server.SimpleHTTPRequestHandler
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTPS
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(CERT_FILE, KEY_FILE)
        
        with socketserver.TCPServer(("", HTTPS_PORT), handler) as httpd:
            httpd.socket = context.wrap_socket(httpd.socket, server_side=True)
            print(f"üîí HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {HTTPS_PORT}")
            print(f"üåê URL: https://localhost:{HTTPS_PORT}")
            httpd.serve_forever()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def proxy_to_localhost():
    """–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ localhost:3000"""
    try:
        import http.server
        import urllib.request
        
        class ProxyHandler(http.server.BaseHTTPRequestHandler):
            def do_GET(self):
                try:
                    # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –Ω–∞ localhost:3000
                    url = f"http://localhost:{LOCAL_PORT}{self.path}"
                    response = urllib.request.urlopen(url)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    self.send_response(response.status)
                    for header, value in response.getheaders():
                        self.send_header(header, value)
                    self.end_headers()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    self.wfile.write(response.read())
                    
                except Exception as e:
                    self.send_error(500, f"Proxy error: {e}")
            
            def do_POST(self):
                try:
                    # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
                    content_length = int(self.headers.get('Content-Length', 0))
                    post_data = self.rfile.read(content_length)
                    
                    # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –Ω–∞ localhost:3000
                    url = f"http://localhost:{LOCAL_PORT}{self.path}"
                    req = urllib.request.Request(url, data=post_data, method='POST')
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    for header, value in self.headers.items():
                        if header.lower() not in ['host', 'content-length']:
                            req.add_header(header, value)
                    
                    response = urllib.request.urlopen(req)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    self.send_response(response.status)
                    for header, value in response.getheaders():
                        self.send_header(header, value)
                    self.end_headers()
                    
                    self.wfile.write(response.read())
                    
                except Exception as e:
                    self.send_error(500, f"Proxy error: {e}")
            
            def log_message(self, format, *args):
                print(f"üîÄ Proxy: {format % args}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Å–∏
        with socketserver.TCPServer(("", HTTPS_PORT), ProxyHandler) as httpd:
            print(f"üîÄ HTTPS –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {HTTPS_PORT}")
            print(f"üåê URL: https://localhost:{HTTPS_PORT}")
            print(f"üì° –ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –Ω–∞: http://localhost:{LOCAL_PORT}")
            httpd.serve_forever()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ HTTPS —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è Telegram Mini App")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    try:
        response = requests.get(f"http://localhost:{LOCAL_PORT}", timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {LOCAL_PORT}")
        else:
            print(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
    except:
        print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {LOCAL_PORT} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev")
        return
    
    print()
    print("üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ü—Ä–æ—Å—Ç–æ–π HTTPS —Å–µ—Ä–≤–µ—Ä (—Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã)")
    print("2. HTTPS –ø—Ä–æ–∫—Å–∏ –Ω–∞ localhost:3000 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-2): ").strip()
    
    if choice == "1":
        if create_self_signed_cert():
            start_https_server()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
    elif choice == "2":
        proxy_to_localhost()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
