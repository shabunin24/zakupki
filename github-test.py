#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Mini App –ì–æ—Å–ó–∞–∫—É–ø–∫–∏ –Ω–∞ GitHub Pages
"""

import requests
import time
import json

def test_github_pages_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞ GitHub Pages"""
    print("üåê –¢–µ—Å—Ç 1: GitHub Pages - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
    
    base_url = "https://shabunin24.github.io/zakupki"
    
    # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        response = requests.get(f"{base_url}/index.html", timeout=10)
        if response.status_code == 200:
            content = response.text
            print("   ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            has_title = "–ì–æ—Å–ó–∞–∫—É–ø–∫–∏" in content
            has_search = "search-input" in content or "–ü–æ–∏—Å–∫" in content
            has_menu = "main-menu" in content or "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" in content
            has_nav = "bottom-nav" in content or "–ù–∞–≤–∏–≥–∞—Ü–∏—è" in content
            has_telegram = "telegram-web-app.js" in content
            has_config = "config.js" in content
            
            print(f"      –ó–∞–≥–æ–ª–æ–≤–æ–∫: {'‚úÖ' if has_title else '‚ùå'}")
            print(f"      –ü–æ–∏—Å–∫: {'‚úÖ' if has_search else '‚ùå'}")
            print(f"      –ú–µ–Ω—é: {'‚úÖ' if has_menu else '‚ùå'}")
            print(f"      –ù–∞–≤–∏–≥–∞—Ü–∏—è: {'‚úÖ' if has_nav else '‚ùå'}")
            print(f"      Telegram API: {'‚úÖ' if has_telegram else '‚ùå'}")
            print(f"      –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if has_config else '‚ùå'}")
            
            main_score = sum([has_title, has_search, has_menu, has_nav, has_telegram, has_config])
            main_total = 6
            
        else:
            print(f"   ‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥: {response.status_code}")
            main_score = 0
            main_total = 6
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        main_score = 0
        main_total = 6
    
    # –¢–µ—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        response = requests.get(f"{base_url}/test.html", timeout=10)
        if response.status_code == 200:
            content = response.text
            print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            has_test_buttons = "test-btn" in content
            has_auto_test = "auto-test.js" in content
            has_search_test = "üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞" in content
            has_favorites_test = "‚≠ê –¢–µ—Å—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" in content
            
            print(f"      –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏: {'‚úÖ' if has_test_buttons else '‚ùå'}")
            print(f"      –ê–≤—Ç–æ—Ç–µ—Å—Ç: {'‚úÖ' if has_auto_test else '‚ùå'}")
            print(f"      –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞: {'‚úÖ' if has_search_test else '‚ùå'}")
            print(f"      –¢–µ—Å—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {'‚úÖ' if has_favorites_test else '‚ùå'}")
            
            test_score = sum([has_test_buttons, has_auto_test, has_search_test, has_favorites_test])
            test_total = 4
            
        else:
            print(f"   ‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥: {response.status_code}")
            test_score = 0
            test_total = 4
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        test_score = 0
        test_total = 4
    
    # –¢–µ—Å—Ç CSS —Å—Ç–∏–ª–µ–π
    try:
        response = requests.get(f"{base_url}/styles.css", timeout=10)
        if response.status_code == 200:
            content = response.text
            print("   ‚úÖ CSS —Å—Ç–∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            has_ios_style = "apple-system" in content or "BlinkMacSystemFont" in content
            has_colors = "#007AFF" in content or "007AFF" in content
            has_responsive = "@media" in content
            has_animations = "animation" in content or "transition" in content
            
            print(f"      iOS —Å—Ç–∏–ª—å: {'‚úÖ' if has_ios_style else '‚ùå'}")
            print(f"      –¶–≤–µ—Ç–∞: {'‚úÖ' if has_colors else '‚ùå'}")
            print(f"      –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: {'‚úÖ' if has_responsive else '‚ùå'}")
            print(f"      –ê–Ω–∏–º–∞—Ü–∏–∏: {'‚úÖ' if has_animations else '‚ùå'}")
            
            css_score = sum([has_ios_style, has_colors, has_responsive, has_animations])
            css_total = 4
            
        else:
            print(f"   ‚ùå CSS –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            css_score = 0
            css_total = 4
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS: {e}")
        css_score = 0
        css_total = 4
    
    # –¢–µ—Å—Ç JavaScript
    try:
        response = requests.get(f"{base_url}/script.js", timeout=10)
        if response.status_code == 200:
            content = response.text
            print("   ‚úÖ JavaScript –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            has_search = "searchPurchases" in content
            has_favorites = "addToFavorites" in content
            has_applications = "submitApplication" in content
            has_modals = "showModal" in content
            has_notifications = "showNotification" in content
            has_advanced_search = "performAdvancedSearch" in content
            has_filters = "getCurrentFilters" in content
            has_mock_data = "mockPurchases" in content
            
            print(f"      –ü–æ–∏—Å–∫: {'‚úÖ' if has_search else '‚ùå'}")
            print(f"      –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {'‚úÖ' if has_favorites else '‚ùå'}")
            print(f"      –ó–∞—è–≤–∫–∏: {'‚úÖ' if has_applications else '‚ùå'}")
            print(f"      –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞: {'‚úÖ' if has_modals else '‚ùå'}")
            print(f"      –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'‚úÖ' if has_notifications else '‚ùå'}")
            print(f"      –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {'‚úÖ' if has_advanced_search else '‚ùå'}")
            print(f"      –§–∏–ª—å—Ç—Ä—ã: {'‚úÖ' if has_filters else '‚ùå'}")
            print(f"      –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {'‚úÖ' if has_mock_data else '‚ùå'}")
            
            js_score = sum([has_search, has_favorites, has_applications, has_modals, 
                           has_notifications, has_advanced_search, has_filters, has_mock_data])
            js_total = 8
            
        else:
            print(f"   ‚ùå JavaScript –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            js_score = 0
            js_total = 8
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JavaScript: {e}")
        js_score = 0
        js_total = 8
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        response = requests.get(f"{base_url}/config.js", timeout=10)
        if response.status_code == 200:
            content = response.text
            print("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            has_token = "8203311811" in content
            has_api_url = "api.telegram.org" in content
            has_webapp_url = "shabunin24.github.io" in content
            has_bot_config = "BOT_CONFIG" in content
            
            print(f"      –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {'‚úÖ' if has_token else '‚ùå'}")
            print(f"      API URL: {'‚úÖ' if has_api_url else '‚ùå'}")
            print(f"      WebApp URL: {'‚úÖ' if has_webapp_url else '‚ùå'}")
            print(f"      –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞: {'‚úÖ' if has_bot_config else '‚ùå'}")
            
            config_score = sum([has_token, has_api_url, has_webapp_url, has_bot_config])
            config_total = 4
            
        else:
            print(f"   ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥: {response.status_code}")
            config_score = 0
            config_total = 4
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        config_score = 0
        config_total = 4
    
    return {
        'main_page': {'score': main_score, 'total': main_total},
        'test_page': {'score': test_score, 'total': test_total},
        'css': {'score': css_score, 'total': css_total},
        'javascript': {'score': js_score, 'total': js_total},
        'config': {'score': config_score, 'total': config_total}
    }

def test_telegram_bot_api():
    """–¢–µ—Å—Ç Telegram Bot API"""
    print("\nü§ñ –¢–µ—Å—Ç 2: Telegram Bot API")
    
    bot_token = "8203311811:AAEbVoeZ0inIO7CUFuGUbwNRdoL2xfpxfPw"
    api_url = f"https://api.telegram.org/bot{bot_token}/getMe"
    
    try:
        response = requests.get(api_url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data['result']
                print(f"   ‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: @{bot_info['username']}")
                print(f"      –ò–º—è: {bot_info['first_name']}")
                print(f"      ID: {bot_info['id']}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–æ—Ç–∞
                webhook_url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
                webhook_response = requests.get(webhook_url, timeout=10)
                if webhook_response.status_code == 200:
                    webhook_data = webhook_response.json()
                    if webhook_data.get('ok'):
                        webhook_info = webhook_data['result']
                        has_webhook = webhook_info.get('url', '') != ''
                        print(f"      Webhook: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if has_webhook else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
                        if has_webhook:
                            print(f"         URL: {webhook_info['url']}")
                
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {data.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                return False
        else:
            print(f"   ‚ùå API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_advanced_features():
    """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüöÄ –¢–µ—Å—Ç 3: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    
    base_url = "https://shabunin24.github.io/zakupki"
    
    try:
        response = requests.get(f"{base_url}/script.js", timeout=10)
        if response.status_code == 200:
            content = response.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ JavaScript
            has_advanced_search = "performAdvancedSearch" in content
            has_filters = "getCurrentFilters" in content
            has_quick_filters = "quickFilter" in content
            has_stats = "createSearchStats" in content
            has_category_filter = "categoryFilter" in content
            has_region_filter = "regionFilter" in content
            has_price_filter = "priceFrom" in content and "priceTo" in content
            has_status_filter = "statusFilter" in content
            
            print(f"   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {'‚úÖ' if has_advanced_search else '‚ùå'}")
            print(f"   –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: {'‚úÖ' if has_filters else '‚ùå'}")
            print(f"   –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {'‚úÖ' if has_quick_filters else '‚ùå'}")
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'‚úÖ' if has_stats else '‚ùå'}")
            print(f"   –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {'‚úÖ' if has_category_filter else '‚ùå'}")
            print(f"   –§–∏–ª—å—Ç—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤: {'‚úÖ' if has_region_filter else '‚ùå'}")
            print(f"   –§–∏–ª—å—Ç—Ä —Ü–µ–Ω: {'‚úÖ' if has_price_filter else '‚ùå'}")
            print(f"   –§–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞: {'‚úÖ' if has_status_filter else '‚ùå'}")
            
            advanced_score = sum([has_advanced_search, has_filters, has_quick_filters, has_stats,
                                has_category_filter, has_region_filter, has_price_filter, has_status_filter])
            advanced_total = 8
            
            return {'score': advanced_score, 'total': advanced_total}
        else:
            return {'score': 0, 'total': 8}
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return {'score': 0, 'total': 8}

def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    
    base_url = "https://shabunin24.github.io/zakupki"
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    load_times = []
    files_to_test = ['index.html', 'styles.css', 'script.js', 'config.js']
    
    for file in files_to_test:
        try:
            start_time = time.time()
            response = requests.get(f"{base_url}/{file}", timeout=15)
            end_time = time.time()
            
            if response.status_code == 200:
                load_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                load_times.append(load_time)
                print(f"   {file}: {load_time:.0f}ms")
            else:
                print(f"   {file}: ‚ùå –ö–æ–¥ {response.status_code}")
                
        except Exception as e:
            print(f"   {file}: ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    if load_times:
        avg_load_time = sum(load_times) / len(load_times)
        max_load_time = max(load_times)
        
        print(f"\n   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {avg_load_time:.0f}ms")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_load_time:.0f}ms")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if avg_load_time < 1000:
            performance_score = 3  # –û—Ç–ª–∏—á–Ω–æ
            performance_text = "–û—Ç–ª–∏—á–Ω–æ"
        elif avg_load_time < 2000:
            performance_score = 2  # –•–æ—Ä–æ—à–æ
            performance_text = "–•–æ—Ä–æ—à–æ"
        elif avg_load_time < 5000:
            performance_score = 1  # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ
            performance_text = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        else:
            performance_score = 0  # –ü–ª–æ—Ö–æ
            performance_text = "–ü–ª–æ—Ö–æ"
        
        print(f"   –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance_text}")
        
        return {'score': performance_score, 'total': 3, 'avg_time': avg_load_time}
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        return {'score': 0, 'total': 3, 'avg_time': 0}

def run_github_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ GitHub Pages"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê GITHUB PAGES")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    github_results = test_github_pages_functionality()
    bot_api_ok = test_telegram_bot_api()
    advanced_results = test_advanced_features()
    performance_results = test_performance()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_score = 0
    total_possible = 0
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    for test_name, test_data in github_results.items():
        score = test_data['score']
        total = test_data['total']
        percentage = (score / total) * 100 if total > 0 else 0
        
        print(f"   {test_name}: {score}/{total} ({percentage:.1f}%)")
        total_score += score
        total_possible += total
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
    total_possible += 1  # Bot API
    if bot_api_ok:
        total_score += 1
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    advanced_score = advanced_results['score']
    advanced_total = advanced_results['total']
    total_score += advanced_score
    total_possible += advanced_total
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    perf_score = performance_results['score']
    perf_total = performance_results['total']
    total_score += perf_score
    total_possible += perf_total
    
    print(f"   Telegram Bot API: {'1/1 (100.0%)' if bot_api_ok else '0/1 (0.0%)'}")
    print(f"   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {advanced_score}/{advanced_total} ({(advanced_score/advanced_total)*100:.1f}%)")
    print(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {perf_score}/{perf_total} ({(perf_score/perf_total)*100:.1f}%)")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    success_rate = (total_score / total_possible) * 100
    
    print(f"\nüìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_score}/{total_possible} ({success_rate:.1f}%)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if success_rate >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ.")
    elif success_rate >= 70:
        print("‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    elif success_rate >= 50:
        print("‚ùå –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.")
    else:
        print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º
    if success_rate < 100:
        print("\nüîß –ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        for test_name, test_data in github_results.items():
            if test_data['score'] < test_data['total']:
                missing = test_data['total'] - test_data['score']
                print(f"   ‚Ä¢ {test_name} - –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {missing} –∏–∑ {test_data['total']} —Ñ—É–Ω–∫—Ü–∏–π")
        
        # API –ø—Ä–æ–±–ª–µ–º—ã
        if not bot_api_ok:
            print("   ‚Ä¢ Telegram Bot API - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if advanced_results['score'] < advanced_results['total']:
            missing = advanced_results['total'] - advanced_results['score']
            print(f"   ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {missing} –∏–∑ {advanced_results['total']}")
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if performance_results['score'] < performance_results['total']:
            print(f"   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {performance_results['avg_time']:.0f}ms")
    
    # –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
    print(f"\nüöÄ –°–¢–ê–¢–£–° –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ü–†–û–î–ê–ö–®–ï–ù–£:")
    if success_rate >= 90:
        print("   ‚úÖ –ì–û–¢–û–í - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
    elif success_rate >= 70:
        print("   ‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í - –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    elif success_rate >= 50:
        print("   ‚ùå –ù–ï –ì–û–¢–û–í - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("   üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ï –ì–û–¢–û–í - –¢—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    
    return {
        'success_rate': success_rate,
        'total_score': total_score,
        'total_possible': total_possible,
        'production_ready': success_rate >= 90,
        'details': {
            'github': github_results,
            'bot_api': bot_api_ok,
            'advanced': advanced_results,
            'performance': performance_results
        }
    }

if __name__ == "__main__":
    try:
        results = run_github_comprehensive_test()
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['success_rate']:.1f}%")
        print(f"üöÄ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: {'–î–∞' if results['production_ready'] else '–ù–µ—Ç'}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open('github_test_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ github_test_results.json")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
