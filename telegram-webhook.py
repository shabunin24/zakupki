#!/usr/bin/env python3
"""
Telegram Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –±–æ—Ç–∞ –ì–æ—Å–ó–∞–∫—É–ø–∫–∏
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç Mini App
"""

import json
import requests
from flask import Flask, request, jsonify
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8203311811:AAEbVoeZ0inIO7CUFuGUbwNRdoL2xfpxfPw"
BOT_USERNAME = "oborotn_bot"
API_BASE = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

def send_telegram_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"{API_BASE}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def create_mini_app_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Mini App"""
    return {
        "inline_keyboard": [
            [
                {
                    "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ì–æ—Å–ó–∞–∫—É–ø–∫–∏",
                    "web_app": {
                        "url": "http://localhost:3000"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
                    }
                }
            ],
            [
                {
                    "text": "üîç –ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫",
                    "callback_data": "search"
                },
                {
                    "text": "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    "callback_data": "favorites"
                }
            ],
            [
                {
                    "text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                    "callback_data": "help"
                }
            ]
        ]
    }

def handle_start_command(chat_id, user_info):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–æ—Å–ó–∞–∫—É–ø–∫–∏!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user_info.get('first_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!

üîç <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –ü–æ–∏—Å–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–∫–∞—Ö
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—É–ø–∫–∞—Ö

üöÄ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
    """
    
    keyboard = create_mini_app_keyboard()
    send_telegram_message(chat_id, welcome_text, keyboard)

def handle_callback_query(callback_query):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    chat_id = callback_query["message"]["chat"]["id"]
    data = callback_query["data"]
    
    if data == "search":
        text = "üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫</b>\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."
        keyboard = create_mini_app_keyboard()
        send_telegram_message(chat_id, text, keyboard)
    
    elif data == "favorites":
        text = "‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b>\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫."
        keyboard = create_mini_app_keyboard()
        send_telegram_message(chat_id, text, keyboard)
    
    elif data == "help":
        help_text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –ì–æ—Å–ó–∞–∫—É–ø–∫–∏</b>

üîç <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ <b>–ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫</b> - –Ω–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∑–∞–∫—É–ø–∫–∏
‚Ä¢ <b>–§–∏–ª—å—Ç—Ä—ã</b> - –ø–æ —Ä–µ–≥–∏–æ–Ω—É, —Ü–µ–Ω–µ, —Å—Ç–∞—Ç—É—Å—É, –º–µ—Ç–æ–¥—É –∑–∞–∫—É–ø–∫–∏
‚Ä¢ <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b> - —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏
‚Ä¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–∫–∞—Ö

üì± <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ì–æ—Å–ó–∞–∫—É–ø–∫–∏"
2. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
3. –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–∫—É–ø–∫–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ï–ò–° (zakupki.gov.ru)
‚Ä¢ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã –∑–∞–∫—É–ø–æ–∫
‚Ä¢ –î—Ä—É–≥–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
        """
        keyboard = create_mini_app_keyboard()
        send_telegram_message(chat_id, help_text, keyboard)

def handle_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = message["chat"]["id"]
    user_info = message.get("from", {})
    text = message.get("text", "").strip()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info.get('username', 'Unknown')}: {text}")
    
    if text == "/start":
        handle_start_command(chat_id, user_info)
    elif text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi"]:
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_info.get('first_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ì–æ—Å–ó–∞–∫—É–ø–∫–∏."
        keyboard = create_mini_app_keyboard()
        send_telegram_message(chat_id, welcome_text, keyboard)
    else:
        # –î–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        text = "üîç <b>–ì–æ—Å–ó–∞–∫—É–ø–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = create_mini_app_keyboard()
        send_telegram_message(chat_id, text, keyboard)

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram"""
    try:
        data = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        if "message" in data:
            handle_message(data["message"])
        elif "callback_query" in data:
            handle_callback_query(data["callback_query"])
        
        return jsonify({"status": "ok"})
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({"status": "healthy", "bot": BOT_USERNAME})

def set_webhook(url):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
    webhook_url = f"{url}/webhook"
    
    try:
        response = requests.post(f"{API_BASE}/setWebhook", json={
            "url": webhook_url,
            "allowed_updates": ["message", "callback_query"]
        })
        
        result = response.json()
        if result.get("ok"):
            logger.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

def delete_webhook():
    """–£–¥–∞–ª—è–µ—Ç webhook"""
    try:
        response = requests.post(f"{API_BASE}/deleteWebhook")
        result = response.json()
        if result.get("ok"):
            logger.info("Webhook —É–¥–∞–ª–µ–Ω")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {result}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
        return False

def get_bot_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    try:
        response = requests.get(f"{API_BASE}/getMe")
        result = response.json()
        if result.get("ok"):
            bot_info = result["result"]
            logger.info(f"–ë–æ—Ç: @{bot_info['username']} ({bot_info['first_name']})")
            return bot_info
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {result}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        return None

if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = get_bot_info()
    if not bot_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
        exit(1)
    
    print(f"ü§ñ –ë–æ—Ç: @{bot_info['username']} ({bot_info['first_name']})")
    print(f"üîó API: {API_BASE}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    app.run(host='0.0.0.0', port=5000, debug=True)
