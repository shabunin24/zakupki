#!/usr/bin/env python3
"""
Telegram Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –±–æ—Ç–∞ –ì–æ—Å–ó–∞–∫—É–ø–∫–∏
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç Mini App
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å GitHub Pages
"""

import json
import requests
from flask import Flask, request, jsonify
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8203311811:AAEbVoeZ0inIO7CUFuGUbwNRdoL2xfpxfPw"
BOT_USERNAME = "oborotn_bot"
API_BASE = f"https://api.telegram.org/bot{BOT_TOKEN}"

# GitHub Pages URL
GITHUB_PAGES_URL = "https://shabunin24.github.io/zakupki"

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

def send_telegram_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"{API_BASE}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def create_mini_app_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Mini App"""
    return {
        "inline_keyboard": [
            [
                {
                    "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ì–æ—Å–ó–∞–∫—É–ø–∫–∏",
                    "web_app": {
                        "url": f"{GITHUB_PAGES_URL}/"
                    }
                }
            ],
            [
                {
                    "text": "üîç –ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫",
                    "callback_data": "search"
                },
                {
                    "text": "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    "callback_data": "favorites"
                }
            ],
            [
                {
                    "text": "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                    "callback_data": "help"
                }
            ]
        ]
    }

def create_search_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    return {
        "inline_keyboard": [
            [
                {
                    "text": "üìù –í–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å",
                    "callback_data": "input_query"
                }
            ],
            [
                {
                    "text": "üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫",
                    "callback_data": "quick_search"
                }
            ],
            [
                {
                    "text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    "callback_data": "back_to_main"
                }
            ]
        ]
    }

def create_quick_search_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    return {
        "inline_keyboard": [
            [
                {
                    "text": "üìÑ –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è",
                    "callback_data": "search_office"
                },
                {
                    "text": "üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                    "callback_data": "search_construction"
                }
            ],
            [
                {
                    "text": "üíª IT —É—Å–ª—É–≥–∏",
                    "callback_data": "search_it"
                },
                {
                    "text": "üè• –ú–µ–¥–∏—Ü–∏–Ω–∞",
                    "callback_data": "search_medical"
                }
            ],
            [
                {
                    "text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    "callback_data": "back_to_search"
                }
            ]
        ]
    }

def handle_start_command(chat_id, user_info):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–æ—Å–ó–∞–∫—É–ø–∫–∏!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {user_info.get('first_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!

üîç <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>
‚Ä¢ –ü–æ–∏—Å–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —è–∑—ã–∫—É
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫—É–ø–∫–∞—Ö
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—É–ø–∫–∞—Ö

üöÄ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
    """
    
    keyboard = create_mini_app_keyboard()
    send_telegram_message(chat_id, welcome_text, keyboard)

def handle_search_query(chat_id, query):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–∏—Å–∫
    response_text = f"üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫:</b> <i>'{query}'</i>\n\n"
    response_text += "üì± <b>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º</b>\n\n"
    response_text += "üí° <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</b>\n"
    response_text += "‚Ä¢ –ü–æ–π–º–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ\n"
    response_text += "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥\n"
    response_text += "‚Ä¢ –ù–∞–π–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–≥–∏–æ–Ω—ã\n"
    response_text += "‚Ä¢ –ü–æ–∫–∞–∂–µ—Ç —Ü–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã\n"
    response_text += "‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –º–µ—Ç–æ–¥–∞–º –∑–∞–∫—É–ø–æ–∫"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–∏—Å–∫–æ–º
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫",
                    "web_app": {
                        "url": f"{GITHUB_PAGES_URL}/?search={query}"
                    }
                }
            ],
            [
                {
                    "text": "üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                    "callback_data": "search"
                }
            ]
        ]
    }
    
    send_telegram_message(chat_id, response_text, keyboard)

def handle_callback_query(callback_query):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    chat_id = callback_query["message"]["chat"]["id"]
    data = callback_query["data"]
    
    if data == "search":
        text = "üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
        keyboard = create_search_keyboard()
        send_telegram_message(chat_id, text, keyboard)
        
    elif data == "input_query":
        text = "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å</b>\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –±—É–º–∞–≥–∞ –ê4 –æ—Ñ–∏—Å–Ω–∞—è –ú–æ—Å–∫–≤–∞ –¥–æ 200 —Ç—ã—Å —Ä—É–±\n‚Ä¢ —É—Å–ª—É–≥–∏ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –¥–æ—Ä–æ–≥ –ö—Ä—ã–º –æ—Ç 5 –¥–æ 20 –º–ª–Ω\n‚Ä¢ –ø–æ—Å—Ç–∞–≤–∫–∞ –º–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ú–æ—Å–∫–≤–∞ –∫–æ–Ω–∫—É—Ä—Å\n\n<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç</i>"
        keyboard = {
            "inline_keyboard": [
                [
                    {
                        "text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        "callback_data": "back_to_search"
                    }
                ]
            ]
        }
        send_telegram_message(chat_id, text, keyboard)
        
    elif data == "quick_search":
        text = "üîç <b>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        keyboard = create_quick_search_keyboard()
        send_telegram_message(chat_id, text, keyboard)
        
    elif data == "search_office":
        handle_search_query(chat_id, "–∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã")
        
    elif data == "search_construction":
        handle_search_query(chat_id, "—É—Å–ª—É–≥–∏ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –¥–æ—Ä–æ–≥")
        
    elif data == "search_it":
        handle_search_query(chat_id, "IT —É—Å–ª—É–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è")
        
    elif data == "search_medical":
        handle_search_query(chat_id, "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
        
    elif data == "back_to_search":
        text = "üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
        keyboard = create_search_keyboard()
        send_telegram_message(chat_id, text, keyboard)
        
    elif data == "back_to_main":
        text = "üîç <b>–ì–æ—Å–ó–∞–∫—É–ø–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = create_mini_app_keyboard()
        send_telegram_message(chat_id, text, keyboard)
        
    elif data == "favorites":
        text = "‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫—É–ø–∫–∏</b>\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫:"
        keyboard = {
            "inline_keyboard": [
                [
                    {
                        "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                        "web_app": {
                            "url": f"{GITHUB_PAGES_URL}/favorites"
                        }
                    }
                ],
                [
                    {
                        "text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        "callback_data": "back_to_main"
                    }
                ]
            ]
        }
        send_telegram_message(chat_id, text, keyboard)
        
    elif data == "help":
        help_text = """
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫—É–ø–æ–∫:</b>
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –§–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É, —Ü–µ–Ω–µ, –º–µ—Ç–æ–¥—É

üì± <b>Mini App:</b>
‚Ä¢ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–±—É–º–∞–≥–∞ –ê4 –æ—Ñ–∏—Å–Ω–∞—è –ú–æ—Å–∫–≤–∞ –¥–æ 200 —Ç—ã—Å —Ä—É–±"
‚Ä¢ "—É—Å–ª—É–≥–∏ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É –¥–æ—Ä–æ–≥ –ö—Ä—ã–º –æ—Ç 5 –¥–æ 20 –º–ª–Ω"
‚Ä¢ "–ø–æ—Å—Ç–∞–≤–∫–∞ –º–µ–¥–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ú–æ—Å–∫–≤–∞ –∫–æ–Ω–∫—É—Ä—Å"

üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.
        """
        keyboard = {
            "inline_keyboard": [
                [
                    {
                        "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        "web_app": {
                            "url": f"{GITHUB_PAGES_URL}/"
                        }
                    }
                ],
                [
                    {
                        "text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                        "callback_data": "back_to_main"
                    }
                ]
            ]
        }
        send_telegram_message(chat_id, help_text, keyboard)

def handle_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = message["chat"]["id"]
    
    if "text" in message:
        text = message["text"]
        
        if text.startswith("/start"):
            user_info = message.get("from", {})
            handle_start_command(chat_id, user_info)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            handle_search_query(chat_id, text)
    else:
        # –î–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        text = "üîç <b>–ì–æ—Å–ó–∞–∫—É–ø–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = create_mini_app_keyboard()
        send_telegram_message(chat_id, text, keyboard)

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram"""
    try:
        data = request.get_json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        if "message" in data:
            handle_message(data["message"])
        elif "callback_query" in data:
            handle_callback_query(data["callback_query"])
        
        return jsonify({"status": "ok"})
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        "status": "healthy", 
        "bot": BOT_USERNAME,
        "github_pages": GITHUB_PAGES_URL
    })

def set_webhook(url):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
    webhook_url = f"{url}/webhook"
    
    try:
        response = requests.post(f"{API_BASE}/setWebhook", json={
            "url": webhook_url,
            "allowed_updates": ["message", "callback_query"]
        })
        
        result = response.json()
        if result.get("ok"):
            logger.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return False

def delete_webhook():
    """–£–¥–∞–ª—è–µ—Ç webhook"""
    try:
        response = requests.post(f"{API_BASE}/deleteWebhook")
        result = response.json()
        if result.get("ok"):
            logger.info("Webhook —É–¥–∞–ª–µ–Ω")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {result}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
        return False

def get_bot_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    try:
        response = requests.get(f"{API_BASE}/getMe")
        result = response.json()
        if result.get("ok"):
            bot_info = result["result"]
            logger.info(f"–ë–æ—Ç: @{bot_info['username']} ({bot_info['first_name']})")
            return bot_info
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {result}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        return None

if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = get_bot_info()
    if not bot_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
        exit(1)
    
    print(f"ü§ñ –ë–æ—Ç: @{bot_info['username']} ({bot_info['first_name']})")
    print(f"üîó API: {API_BASE}")
    print(f"üåê GitHub Pages: {GITHUB_PAGES_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("üöÄ –ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    app.run(host='0.0.0.0', port=5001, debug=True)
